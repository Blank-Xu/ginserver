basePath: /api/v1
definitions:
  context.Paging:
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 5
        type: integer
      total_count:
        example: 100
        type: integer
    type: object
  context.Response:
    properties:
      code:
        example: 400
        type: integer
      errors:
        example: '{array}'
        type: string
      msg:
        example: status bad request
        type: string
    type: object
  system.UsersGetResponse:
    properties:
      paging:
        $ref: '#/definitions/context.Paging'
        type: object
      records:
        items:
          $ref: '#/definitions/user.User'
        type: array
    type: object
  user.User:
    properties:
      created:
        type: string
      email:
        type: string
      icon:
        type: string
      id:
        type: integer
      login_ip:
        type: string
      login_time:
        type: string
      nickname:
        type: string
      phone:
        type: string
      remark:
        type: string
      state:
        type: boolean
      updated:
        type: string
      updater:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: MIT
    url: https://github.com/Blank-Xu/ginserver/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: ginserver Swagger API
  version: "0.1"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: get user records
      parameters:
      - description: cols
        in: path
        name: cols
        type: string
      - description: page
        in: path
        name: page
        type: integer
      - description: page_size
        in: path
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.UsersGetResponse'
            type: object
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/context.Response'
            type: object
      summary: get user records
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      operationId: get-string-by-int
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: cols
        in: path
        name: cols
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/context.Response'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/context.Response'
            type: object
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/context.Response'
            type: object
      summary: get an user record
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  JWT Auth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
